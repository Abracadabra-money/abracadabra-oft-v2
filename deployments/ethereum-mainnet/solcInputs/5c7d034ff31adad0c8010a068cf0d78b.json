{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Feehandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.22;\n\nimport { IFeeHandler } from \"./interfaces/IFeeHandler.sol\";\nimport { IAggregator } from \"./interfaces/IAggregator.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FeeHandler is IFeeHandler, Ownable {\n    event FixedNativeFeeChanged(uint256 previous, uint256 current);\n    event OracleImplementationChange(IAggregator indexed previous, IAggregator indexed current);\n    event QuoteTypeChanged(QuoteType previous, QuoteType current);\n    event FeeToChanged(address indexed previous, address indexed current);\n    event UsdFeeChanged(uint256 previous, uint256 current);\n\n    error InvalidQuoteType(QuoteType);\n    error Unauthorized();\n\n    enum QuoteType {\n        Oracle,\n        Fixed\n    }\n\n    uint256 public constant DEFAULT_USD_FEE = 1e18;\n\n    address public override feeTo;\n    IAggregator public aggregator;\n    uint256 public fixedNativeFee;\n    uint256 public usdFee;\n    QuoteType public quoteType = QuoteType.Oracle;\n\n    constructor(\n        uint256 _fixedNativeFee,\n        address _aggregator,\n        address _feeTo,\n        QuoteType _quoteType,\n        address _owner\n    ) Ownable(_owner) {\n        fixedNativeFee = _fixedNativeFee;\n        aggregator = IAggregator(_aggregator);\n        feeTo = _feeTo;\n        quoteType = _quoteType;\n        usdFee = DEFAULT_USD_FEE;\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // PUBLIC\n    /////////////////////////////////////////////////////////////////////////\n\n    function quoteNativeFee(\n        uint32 /*_dstEid*/,\n        bytes memory /*_message*/,\n        bytes memory /*_options*/,\n        uint256 /*_endpointNativeFee*/,\n        uint256 /*_endpointNativelzTokenFee*/\n    ) external view override returns (uint256 nativeFee) {\n        if (quoteType == QuoteType.Oracle) {\n            nativeFee = ((10 ** aggregator.decimals()) * usdFee) / uint256(aggregator.latestAnswer());\n        } else if (quoteType == QuoteType.Fixed) {\n            nativeFee = fixedNativeFee;\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // ADMIN\n    /////////////////////////////////////////////////////////////////////////\n\n    function setFixedNativeFee(uint256 _fixedNativeFee) external onlyOwner {\n        emit FixedNativeFeeChanged(fixedNativeFee, _fixedNativeFee);\n        fixedNativeFee = _fixedNativeFee;\n    }\n\n    function setAggregator(IAggregator _aggregator) external onlyOwner {\n        emit OracleImplementationChange(aggregator, _aggregator);\n        aggregator = _aggregator;\n    }\n\n    function setUsdFee(uint256 _usdFee) external onlyOwner {\n        emit UsdFeeChanged(usdFee, _usdFee);\n        usdFee = _usdFee;\n    }\n\n    function setQuoteType(QuoteType _quoteType) external onlyOwner {\n        if (_quoteType > QuoteType.Fixed) {\n            revert InvalidQuoteType(_quoteType);\n        }\n        emit QuoteTypeChanged(quoteType, _quoteType);\n        quoteType = _quoteType;\n    }\n\n    function setFeeTo(address _feeTo) external onlyOwner {\n        emit FeeToChanged(feeTo, _feeTo);\n        feeTo = _feeTo;\n    }\n}\n"
    },
    "contracts/interfaces/IAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.22;\n\ninterface IAggregator {\n    function decimals() external view returns (uint8);\n\n    function latestAnswer() external view returns (int256 answer);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/interfaces/IFeeHandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.22;\n\ninterface IFeeHandler {\n    function feeTo() external view returns (address);\n\n    function quoteNativeFee(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        uint256 _endpointNativeFee,\n        uint256 _endpointNativelzTokenFee\n    ) external view returns (uint256 feeAmount);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}